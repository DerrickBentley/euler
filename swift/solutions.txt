//  Write some awesome Swift code, or import libraries like "Foundation",
//  "Dispatch", or "Glibc"


//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.

var count:Int = 0

func threeOrFive(Number x:Int) -> Int {
	if x%3 == 0 || x%5 == 0 {
		return x
	}
	return 0
}

for i in 0..<1000 {
	count += threeOrFive(Number:i)
}

print(count)


//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


func getFib(term:Int) -> Int {
	if(term <= -1){
		return 0
	}
	if(term <= 1){
		return 1
	}
	return getFib(term:term-1) + getFib(term:term-2)
}

var fibSum:Int = 0
var fibCount:Int = 0
var fibKeepGoing:Bool = true
while fibKeepGoing {
	var currTerm = getFib(term:fibCount)
	if(currTerm >= 4000000){
		fibKeepGoing = false
	} else {
		if currTerm%2 == 0 {
			fibSum += currTerm
		}
		fibCount += 1
	}
}

print(fibSum)


//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

func isDivisible(From:Int, UpTo:Int, Number x:Int) -> Bool {
	var result:Bool = true
	for i in From...UpTo {
		if x%i != 0 {
			result = false
		}
	}
	return result
}

var isDivisCount:Int = 1
while isDivisible(From:1, UpTo:20, Number:isDivisCount) == false {
	isDivisCount += 1
}
print("derricks count \(isDivisCount)")



